name: rebuild containizen
on:
  # check_suite:
  #   types: [ 'completed' ]
  push:
    branches:
      - master
  schedule:
    - cron: '15 2 * * *'

jobs:
  makisu:
    name: NixOS & Makisu
    runs-on: ubuntu-latest
    steps:
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run: docker build -t foggyubiquity/containizen:makisu .
      - run: docker push foggyubiquity/containizen:makisu
  nodejs:
    name: NodeJS
    needs: [ makisu ]
    runs-on: ubuntu-latest
    container:
      image: docker://foggyubiquity/containizen:makisu
      volumes:
        - nix:/nix
    strategy:
      matrix:
        version: [10, 12]
        include:
          - version: 12
            next: -next
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Generate Whitelist
      - run: nix-build --cores 0 base.nix
      - run: "nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p vulnix yj jq --run 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -tj | jq \"with_entries(if (.key|test(\\\"^(bash|shadow|glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -jt > build.whitelist'"
      # Generate Container
      - run: nix-build --cores 0 --argstr ver ${{ matrix.version }} --argstr vulnix true languages/nodejs
      # Scan for CVEs
      - run: nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p vulnix --run 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt' | true
      - run: nix-build --cores 0 --argstr ver ${{ matrix.version }} languages/nodejs && mkdir -p artifacts; mv vulnerabilities.txt artifacts/vulnerabilities.txt; mv $(realpath result) artifacts/containizen.tar.gz; ls -lart artifacts
      - uses: actions/upload-artifact@v1
        with:
          name: nodejs${{ matrix.next }}
          path: artifacts
  # python:
  #   name: Python
  #   runs-on: ubuntu-latest
  #   container:
  #     image: docker://foggyubiquity/containizen:makisu
  #     volumes:
  #       - nix:/nix
  #   strategy:
  #     matrix:
  #       version: [2, 3]
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         fetch-depth: 1
  #     - uses: actions-hub/docker/login@master
  #       env:
  #         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #     # Generate Whitelist
  #     - run: nix-build --cores 0 base.nix
  #     - run: "nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p vulnix yj jq --run 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -tj | jq \"with_entries(if (.key|test(\\\"^(bash|shadow|glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -jt > build.whitelist'"
  #     # Generate Container
  #     - run: nix-build --cores 0 --argstr ver ${{ matrix.version }} --argstr vulnix true languages/python
  #     # Scan for CVEs
  #     - run: nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p vulnix --run 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt' | true
  #     - run: nix-build --cores 0 --argstr ver ${{ matrix.version }} languages/python && cp result containizen.tar.gz
  #     - uses: actions-hub/docker@master
  #       with:
  #         args: load -i containizen.tar.gz
  #     - uses: actions-hub/docker@master
  #       with:
  #         args: push foggyubiquity/containizen:python${{ matrix.version }}
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: python${{ matrix.version }}.txt
  #         path: vulnerabilities.txt
  validate:
    name: Validate Images
    needs: [ NodeJS ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        language: [ nodejs ]
        next: [ "", "-next" ]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.language }}${{ matrix.next }}
          path: artifacts/${{ matrix.language }}${{ matrix.next }}
      - run: docker load -i artifacts/${{ matrix.language }}/containizen.tar.gz
      - run: docker build --build-arg version=nodejs${{ matrix.version }} -t foggyubiquity/containizen:test languages/${{ matrix.language }}/validate/
      - run: "docker run foggyubiquity/containizen:test | grep \"Hello, world!\""
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker push foggyubiquity/containizen:${{ matrix.language }}${{ matrix.next }}

