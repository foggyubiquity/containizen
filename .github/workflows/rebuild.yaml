name: rebuild containizen
on:
  # check_suite:
  #   types: [ 'completed' ]
  push:
    branches:
      - master
  schedule:
    - cron: '15 2 * * *'

jobs:
  makisu:
    name: NixOS & Makisu
    runs-on: ubuntu-latest
    steps:
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        if: github.actor != 'nektos/act'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run: docker build -t foggyubiquity/containizen:makisu .
      - run: docker push foggyubiquity/containizen:makisu
        if: github.actor != 'nektos/act'
  NodeJS:
    needs: [ makisu ]
    runs-on: ubuntu-latest
    container:
      image: foggyubiquity/containizen:makisu
      volumes:
        - nix:/nix
      env:
        NIX_SHELL: nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p
        NIX_BUILD: nix-build --cores 0
    strategy:
      matrix:
        version: [ 10, 12 ]
        pkgManager: [ "none", "bundled" ]
        language: [ "nodejs" ]
        include:
          - version: 10
            rolling: true
          - language: "nodejs"
            pkgManager: "bundled"
            pkgManagerName: "-npm"
    steps:
      - uses: actions/checkout@v1
        # Individual IF's added as currently no global or matrix manipulation for 'act'
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          fetch-depth: 1
      # Generate Whitelist
      - name: Build Base
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} base.nix
      - name: Construct Vulnerabilities Whitelist
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} vulnix yj jq --run 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -tj | jq \"with_entries(if (.key|test(\\\"^(bash|shadow|glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -jt > build.whitelist'"
      - name: Generate Dependency Tree
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr vulnix true languages/${{ matrix.language }}
      - name: Scan for Vulnerabilities
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} vulnix --run 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt; cat vulnerabilities.txt'
      - name: Create Container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr pkgManager ${{ matrix.pkgManager }} languages/${{ matrix.language }} && mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz && ls -larth artifacts
      - name: Construct ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} test container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} docker --run 'docker load -i ./result && docker build --build-arg version=${{ matrix.language }}-v${{ matrix.version }} -t foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} languages/${{matrix.language }}/validate/'
      - name: Validate ${{ matrix.language }}-v${{ matrix.version }}-${{ matrix.pkgManager }}
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} docker --run 'docker run foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} | grep \"Hello, world!\"'"
      - name: Bundle Artifacts
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz
      - uses: actions/upload-artifact@v1
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts
  uploadNodeJS:
    needs: [ NodeJS ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        version: [ 10, 12 ]
        pkgManager: [ "none", "bundled" ]
        language: [ "nodejs" ]
        include:
          - version: 10
            rolling: true
          - language: "nodejs"
            pkgManager: "bundled"
            pkgManagerName: "-npm"
    steps:
      - uses: actions/checkout@v1
        if: github.actor != 'nektos/act'
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v1
        if: github.actor != 'nektos/act'
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Load ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker load -i artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}/containizen.tar.gz
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        if: github.actor != 'nektos/act'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Upload ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker push foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Tag rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker tag foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
      - name: Upload rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker push foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
  Python:
    needs: [ makisu ]
    runs-on: ubuntu-latest
    container:
      image: foggyubiquity/containizen:makisu
      volumes:
        - nix:/nix
      env:
        NIX_SHELL: nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p
        NIX_BUILD: nix-build --cores 0
    strategy:
      matrix:
        version: [ 37 ]
        # pkgManager: [ "none", "bundled" ]
        pkgManager: [ "none" ]
        language: [ "python" ]
        include:
          - version: 37
            rolling: true
          # - language: "python"
          #   pkgManager: "bundled"
          #   pkgManagerName: "-pip"
    steps:
      - uses: actions/checkout@v1
        # Individual IF's added as currently no global or matrix manipulation for 'act'
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          fetch-depth: 1
      # Compile 'Hello World'
      - name: Build Hello World
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "cd languages/python/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'pip install pip-tools && pip-sync requirements/prod.txt requirements/dev.txt && pip install -r requirements/prod.txt --upgrade --target pkgs && SOURCE_DATE_EPOCH=$(date +%s) shiv --compressed --python \"/bin/s6-env python3\" --console-script main --output-file containizen.pyz --site-packages pkgs .'"
      ## Start: Copy Paste ##
      # Generate Whitelist
      - name: Build Base
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} base.nix
      - name: Construct Vulnerabilities Whitelist
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} vulnix yj jq --run 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -tj | jq \"with_entries(if (.key|test(\\\"^(bash|shadow|glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -jt > build.whitelist'"
      - name: Generate Dependency Tree
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr vulnix true languages/${{ matrix.language }}
      - name: Scan for Vulnerabilities
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} vulnix --run 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt; cat vulnerabilities.txt'
      - name: Create Container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr pkgManager ${{ matrix.pkgManager }} languages/${{ matrix.language }}
      - name: Construct ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} test container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} docker --run 'docker load -i ./result && docker build --build-arg version=${{ matrix.language }}-v${{ matrix.version }} -t foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} languages/${{matrix.language }}/validate/'
      - name: Validate ${{ matrix.language }}-v${{ matrix.version }}-${{ matrix.pkgManager }}
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} docker --run 'docker run foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} | grep \"Hello, world!\"'"
      - name: Bundle Artifacts
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz
      - uses: actions/upload-artifact@v1
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts
      ## End: Copy Paste ##
  uploadPython:
    needs: [ Python ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        version: [ 37 ]
        # pkgManager: [ "none", "bundled" ]
        pkgManager: [ "none" ]
        language: [ "python" ]
        include:
          - version: 37
            rolling: true
          # - language: "python"
          #   pkgManager: "bundled"
          #   pkgManagerName: "-pip"
    steps:
      ## Start: Copy Paste ##
      - uses: actions/checkout@v1
        if: github.actor != 'nektos/act'
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v1
        if: github.actor != 'nektos/act'
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Load ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker load -i artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}/containizen.tar.gz
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        if: github.actor != 'nektos/act'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Upload ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker push foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Tag rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker tag foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
      - name: Upload rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker push foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
      ## End: Copy Paste ##
  Java:
    needs: [ makisu ]
    runs-on: ubuntu-latest
    container:
      image: foggyubiquity/containizen:makisu
      volumes:
        - nix:/nix
      env:
        NIX_SHELL: nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixpkgs-unstable.tar.gz -p
        NIX_BUILD: nix-build --cores 0
    strategy:
      matrix:
        version: [ 8, 11 ]
        # pkgManager: [ "none", "bundled" ]
        pkgManager: [ "none" ]
        language: [ "java" ]
        include:
          - version: 11
            rolling: true
          # - language: "python"
          #   pkgManager: "bundled"
          #   pkgManagerName: "-pip"
    steps:
      - uses: actions/checkout@v1
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          fetch-depth: 1
      # Compile 'Hello World'
      - name: Build Hello World (Java 8)
        if: (github.actor != 'nektos/act' || matrix.rolling == true) && matrix.version == 8
        run: cd languages/${{ matrix.language }}/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'javac HelloWorld/Main.java && jar cfm containizen.jar Manifest.txt HelloWorld/Main.class'
      - name: Build Hello World (Java 11)
        if: (github.actor != 'nektos/act' || matrix.rolling == true) && matrix.version == 11
        run: cd languages/${{ matrix.language }}/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'javac HelloWorld/Main.java && jar --create --file=containizen.jar --main-class=HelloWorld.Main HelloWorld/Main.class'
      ## Start: Copy Paste ##
      - name: Build Base
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} base.nix
      - name: Construct Vulnerabilities Whitelist
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} vulnix yj jq --run 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -tj | jq \"with_entries(if (.key|test(\\\"^(bash|shadow|glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -jt > build.whitelist'"
      - name: Generate Dependency Tree
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr vulnix true languages/${{ matrix.language }}
      - name: Scan for Vulnerabilities
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} vulnix --run 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt; cat vulnerabilities.txt'
      - name: Create Container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr pkgManager ${{ matrix.pkgManager }} languages/${{ matrix.language }}
      - name: Construct ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} test container
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: exec ${NIX_SHELL} docker --run 'docker load -i ./result && docker build --build-arg version=${{ matrix.language }}-v${{ matrix.version }} -t foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} languages/${{matrix.language }}/validate/'
      - name: Validate ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: "exec ${NIX_SHELL} docker --run 'docker run foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} | grep \"Hello, world!\"'"
      - name: Bundle Artifacts
        if: github.actor != 'nektos/act' || matrix.rolling == true
        run: mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz
      - uses: actions/upload-artifact@v1
        if: github.actor != 'nektos/act' || matrix.rolling == true
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts
      ## End: Copy Paste ##
  uploadJava:
    needs: [ Java ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        version: [ 8, 11 ]
        # pkgManager: [ "none", "bundled" ]
        pkgManager: [ "none" ]
        language: [ "java" ]
        include:
          - version: 11
            rolling: true
          # - language: "python"
          #   pkgManager: "bundled"
          #   pkgManagerName: "-pip"
    steps:
      ## Start: Copy Paste ##
      - uses: actions/checkout@v1
        if: github.actor != 'nektos/act'
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v1
        if: github.actor != 'nektos/act'
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Load ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker load -i artifacts/${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}/containizen.tar.gz
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        if: github.actor != 'nektos/act'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Upload ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
        if: github.actor != 'nektos/act'
        run: docker push foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
      - name: Tag rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker tag foggyubiquity/containizen:${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
      - name: Upload rolling
        if: github.actor != 'nektos/act' && matrix.rolling == true
        run: docker push foggyubiquity/containizen:${{ matrix.language }}${{ matrix.pkgManagerName }}
      ## End: Copy Paste ##
