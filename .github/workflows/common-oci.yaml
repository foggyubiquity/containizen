name: OCI

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      version:
        required: true
        type: string
      pkgManager:
        required: true
        type: string
      include:
        required: true
        type: string
    secrets:
      ACT_IONS:
        required: true

jobs:
  build:
    continue-on-error: false
    runs-on: ubuntu-latest
    env:
      # Set nixpkgs-unstable on every step to avoid using local channels & their last update time
      NIX_SHELL: nix-shell --cores 0 --max-jobs auto --run
      NIX_BUILD: nix-build --cores 0 --max-jobs auto
      GITHUB_TOKEN: ${{ secrets.ACT_IONS }}

    strategy:
      matrix:
        language: ${{ fromJSON(inputs.language) }}
        version: ${{ fromJSON(inputs.version) }}
        pkgManager: ${{ fromJSON(inputs.pkgManager) }}
        include: ${{ fromJSON(inputs.include) }}
        # language: [ java, nodejs, python ]
        # version: [ 8, 11, 10, 12, 37 ]
        # pkgManager: [ "none", "bundled" ]
        # exclude:
        #   - language: java
        #     version: 10
        #   - language: java
        #     version: 12
        #   - language: java
        #     version: 37
        #   - language: java
        #     pkgManager: bundled

        #   - language: nodejs
        #     version: 8
        #   - language: nodejs
        #     version: 11
        #   - language: nodejs
        #     version: 37

        #   - language: python
        #     version: 8
        #   - language: python
        #     version: 11
        #   - language: python
        #     version: 10
        #   - language: python
        #     version: 12
        #   - language: python
        #     pkgManager: bundled
        # include:
        #   - rolling: true
        #     version: 10
        #   - rolling: true
        #     version: 11
        #   - rolling: true
        #     version: 37
        #   - language: "nodejs"
        #     pkgManager: "bundled"
        #     pkgManagerName: "-npm"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: cachix/install-nix-action@v17
        if: github.actor != 'nektos/act'
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - uses: cachix/cachix-action@v10
        if: github.actor != 'nektos/act'
        with:
          name: foggyubiquity
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
      - name: Update NixPkgs
        run: exec ${NIX_SHELL} 'niv update nixpkgs'
      - name: Build Base
        run: exec ${NIX_BUILD} base.nix
      - name: Construct Vulnerabilities Whitelist
        run: "exec ${NIX_SHELL} 'vulnix -W tmp.whitelist ./result; cat tmp.whitelist | yj -ty | yq \"with_entries(if (.key|test(\\\"^(glibc).*\\\")) then empty else ( {key: .key, value: .value } ) end )\" | yj -yt > build.whitelist'"
      - name: Generate Dependency Tree
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr vulnix true languages/${{ matrix.language }}
      - name: Scan for Vulnerabilities
        run: exec ${NIX_SHELL} 'vulnix --whitelist build.whitelist ./result > vulnerabilities.txt; cat vulnerabilities.txt'

      - name: Compile Hello World (Java 8)
        if:  startsWith(matrix.language, 'java') && matrix.version == 8
        run: cd languages/${{ matrix.language }}/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'javac HelloWorld/Main.java && jar cfm containizen.jar Manifest.txt HelloWorld/Main.class'
      - name: Compile Hello World (Java 11)
        if:  startsWith(matrix.language, 'java') && matrix.version == 11
        # if: (github.actor != 'nektos/act' || matrix.rolling == true) && matrix.version == 11
        run: cd languages/${{ matrix.language }}/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'javac HelloWorld/Main.java && jar --create --file=containizen.jar --main-class=HelloWorld.Main HelloWorld/Main.class'
      - name: Compile Hello World (Python)
        if: startsWith(matrix.language, 'python')
        run: "cd languages/python/validate && nix-shell --argstr ver ${{ matrix.version }} --run 'pip install pip-tools && pip-sync requirements/prod.txt requirements/dev.txt && pip install -r requirements/prod.txt --upgrade --target pkgs && SOURCE_DATE_EPOCH=$(date +%s) shiv --compressed --python \"/bin/s6-env python3\" --console-script main --output-file containizen.pyz --site-packages pkgs .'"

      - name: Create Container
        run: exec ${NIX_BUILD} --argstr ver ${{ matrix.version }} --argstr pkgManager ${{ matrix.pkgManager }} languages/${{ matrix.language }} && mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz && ls -larth artifacts
      - name: Construct ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} test container
        run: exec ${NIX_SHELL} 'docker load -i ./result && docker build --build-arg version=${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} -t foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} languages/${{matrix.language }}/validate/'
      - name: Validate ${{ matrix.language }}-v${{ matrix.version }}-${{ matrix.pkgManager }}
        run: "exec ${NIX_SHELL} 'docker run foggyubiquity/containizen:test-${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }} | grep \"Hello, world!\"'"
      - name: Bundle Artifacts
        run: mkdir -p artifacts && mv vulnerabilities.txt artifacts/vulnerabilities.txt && cp $(realpath result) artifacts/containizen.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.language }}-v${{ matrix.version }}${{ matrix.pkgManagerName }}
          path: artifacts
